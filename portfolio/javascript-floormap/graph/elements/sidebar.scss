.fp-sidebar {
  height: 100%;
  width: 300px;
  left: 0;
  top: 0;
  background-color: var(--fp-sidebar-bg);
  position: fixed;
  z-index: index($list: $index, $value: sidebar);
  overflow: hidden;
  transform: translateX(calc(-100% + var(--sidebar-width)));
  transition: transform var(--fp-time), height var(--fp-time);
}
.fp-search {
  flex-wrap: nowrap;
  min-height: var(--fp-search-box-height);
  background-color: var(--fp-search-bg);
  .fp-toggle:not(.active) {
    opacity: 0;
    cursor: default;
  }
}
.fp-input {
  width: calc(100% - var(--fp-icon-size) * 2);
  height: var(--fp-search-box-height);
  flex-direction: column;
  align-items: flex-start;
  padding-top: 2px;
  padding-bottom: 2px;
  .fp-input-tag {
    max-width: 100%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    position: relative;
    --x-bg: var(--fp-unactive);
    &::before,
    &::after {
      content: "";
      position: absolute;
      display: block;
      width: 8px;
      height: 1px;
      right: 0;
      top: 10%;
      border-radius: 1px;
      background-color: var(--x-bg);
    }
    &::before {
      rotate: 45deg;
    }
    &::after {
      rotate: -45deg;
    }
    &:hover {
      --x-bg: var(--fp-black);
    }
  }
}
.fp-input-tag {
  cursor: pointer;
  background-color: var(--cat);
  padding: 2px 5px;
  border-radius: 5px;
  transition: filter var(--fp-time);
  float: left;
  max-width: 100%;
  filter: opacity(0.8);
  &:hover {
    filter: opacity(1);
  }
}
.fp-input-text {
  padding: 0;
  flex-grow: 1;
  width: 100%;
  &,
  &:focus,
  &:focus-visible {
    outline: none;
    border: none;
  }
}

@media (max-width: 768px) {
  .fp-sidebar {
    width: 100%;
    height: calc(100% - var(--sidebar-width));
    transform: translate(0, calc(var(--sidebar-width)));
  }
}
.fp-advanced {
  inset: calc(var(--fp-search-box-height) + var(--fp-sidebar-px)) 0 0 0;
  overflow-y: auto;
}

.fp-info {
  height: calc(100% - var(--fp-icon-size));
  overflow-y: auto;
}

.fp-booth-info {
  inset: 0;
}
.fp-booth-info-name {
  width: calc(100% - var(--fp-icon-size));
}

.fp-booth-tags {
  gap: 5px;
}

.fp-advanced,
.fp-booth-info {
  position: absolute;
  z-index: 1;
  background-color: var(--fp-search-bg);
  transition: transform var(--fp-time);
  transform: translateX(-100%);
  box-shadow: 1px 0 0 var(--fp-over);
  &.active {
    transform: translateX(0);
  }
}

.fp-filter {
  cursor: pointer;
  width: var(--fp-icon-size);
  height: var(--fp-search-box-height);
  background-color: var(--fp-search-bg);
  --color: var(--fp-unactive);
  &:hover {
    --color: var(--fp-black);
  }
  &.active {
    background-color: var(--fp-black);
    svg {
      transition: background-color var(--fp-time);
      background-color: var(--fp-black);
    }
    --color: var(--fp-search-bg);
  }
  use {
    transition: fill var(--fp-time);
    stroke-width: 0;
    fill: var(--color);
  }
}

.fp-back,
.fp-toggle {
  cursor: pointer;
  width: var(--fp-icon-size);
  height: var(--fp-icon-size);
  padding: 5px;
  --color: var(--fp-unactive);
  &:hover {
    --color: var(--fp-black);
  }
  span {
    position: relative;
    &::before {
      --i: -1;
    }
    &::after {
      --i: 1;
    }
    &::before,
    &::after {
      content: "";
      position: absolute;
      width: 100%;
      transition: background-color var(--fp-time);
    }
    &,
    &::before,
    &::after {
      display: block;
      height: 2px;
      border-radius: 2px;
      background-color: var(--color);
    }
  }
}

.fp-back {
  span {
    width: 60%;
    transform-origin: left;
    background-color: transparent;
    &::before,
    &::after {
      top: calc(var(--i) * 4px);
      transform: rotate(calc(var(--i) * 45deg));
      box-shadow: 5px calc(var(--i) * -5px) var(--color);
    }
  }
}

.fp-back-btn {
  cursor: pointer;
  background-color: var(--fp-sidebar-bg);
  position: relative;
  z-index: 2;
  &:hover {
    .fp-back {
      --color: var(--fp-black);
    }
  }
}

.fp-toggle {
  span {
    width: 80%;
    &::before,
    &::after {
      top: calc(var(--i) * 5px);
    }
  }
  &.active {
    span {
      background-color: var(--fp-search-bg);
      &::before,
      &::after {
        top: 0;
        transform: rotate(calc(var(--i) * 45deg));
      }
    }
  }
}

.fp-tags {
  position: absolute;
  z-index: index($list: $index, $value: tags);
  overflow-x: auto;
  top: 0;
  right: 0;
  width: calc(100% - var(--sidebar-width));
  height: var(--tags-height);
  background-color: var(--fp-search-bg);
  transition: width var(--fp-time);
}

@media (max-width: 768px) {
  .fp-tags {
    width: 100%;
  }
}

.logo {
  display: block;
  img {
    height: var(--fp-icon-size);
    object-fit: contain;
  }
}

.fp-result {
  margin-top: var(--fp-sidebar-px);
  height: calc(100% - var(--fp-sidebar-px) - var(--fp-search-box-height));
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
}

.fp-result-item,
.fp-info-item {
  cursor: pointer;
  margin-top: 2px;
  background-color: var(--fp-search-bg);
  width: 100%;
  min-height: var(--fp-search-box-height);
  position: relative;
  --loc-width: 90px;
  &::before {
    content: "";
    position: absolute;
    display: block;
    left: 0;
    width: var(--fp-sidebar-px);
    height: 100%;
    background-color: var(--cat);
  }
}
.fp-result-item:hover {
  background-color: var(--fp-hover-bg);
}

.fp-result-item-name {
  flex-grow: 1;
}
.fp-result-item-loc {
  text-align: right;
  flex-basis: var(--loc-width);
  flex-shrink: 0;
}

.fp-download {
  cursor: pointer;
  width: var(--fp-icon-size);
  height: var(--fp-icon-size);
}
.fp-category {
  cursor: pointer;
  &:hover {
    background-color: var(--fp-hover-bg);
  }
}

.fp-event {
  background-color: var(--fp-sidebar-bg);
  position: relative;
  &.active {
    --bg: rgb(128, 0, 75, 0.6);
    position: relative;
    overflow: hidden;
    span {
      position: absolute;
      inset: 0;
      rotate: calc(var(--i) * 90deg);
      border-image: linear-gradient(90deg, transparent, var(--bg)) 1;
      border-top: 4px solid var(--bg);
      transform: translateX(-100%);
      animation-name: event-active;
      animation-duration: calc(var(--fp-time) * 10);
      animation-iteration-count: infinite;
      animation-timing-function: linear;
    }
  }
}
@keyframes event-active {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}
